iC-86  COMPILER   HELLO                                                                      04/26/<0 17:26:41  PAGE   1


DOS 5.0 (045-N) iC-86 COMPILER V4.1, COMPILATION OF MODULE HELLO
OBJECT MODULE PLACED IN hello.OBJ
COMPILER INVOKED BY: C:\IC86_41\IC86.EXE hello.c mod86 code searchinclude(C:\IC86_41\) 

 line level  incl 

    1             /**************************************************************************************/
    2             
    3             /**************************************************************************************/
    4             
    5             #include <I86.H>
    6             #include "types.h"
    7             #include "digits.h"
    8             
    9             #define     DISP_CTRL_ADDR  0x0FFEA
   10             #define     DISP_STAT_ADDR  0x0FFEA
   11             #define     DISP_DATA_ADDR  0x0FFE8
   12             
   13             /*extern uint16_t ReadData();*/                     
   14             
   15             /*uint16_t ReadData()
   16             {
   17                 outword(DISP_CTRL_ADDR, 0x040);
   18                 return(inword(DISP_DATA_ADDR));
   19             }*/
   20             
   21             void main()
   22             {
   23     1       uint16_t key;
   24     1       uint8_t cnt = ' ';
   25     1       uint16_t i;
   26     1       
   27     1           /* Clear the display */
   28     1           outword(DISP_CTRL_ADDR, 0x0D3);
   29     1           for(i = 0; i < 100; i++);   
   30     1           outword(DISP_CTRL_ADDR, 0x080);         /* output WRITE DISPLAY to control word */
   31     1           for(i = 0; i < 100; i++);
   32     1           outword(DISP_DATA_ADDR, (uint16_t)decode_7seg((uint8_t)cnt));       /* output the new display data
                - */
   33     1           
   34     1           while(1)
   35     1           {
   36     2               for(i = 0; i < 10000; i++);
   37     2               
   38     2               /* increment the counter but make sure it stays in the range of 0 - 6 */
   39     2               cnt++;
   40     2               if(cnt > 'z')
   41     2               {
   42     3                   cnt = ' ';
   43     3               }
   44     2               outword(DISP_CTRL_ADDR, 0x080);         /* output WRITE DISPLAY to control word */
   45     2               for(i = 0; i < 100; i++);
   46     2               outword(DISP_DATA_ADDR, (uint16_t)decode_7seg((uint8_t)cnt));       /* output the new display 
                -data */
   47     2               
   48     2               /* Has a key been pressed? */
   49     2       /*      if((inword(DISP_STAT_ADDR) & 0x000F) != 0)
iC-86  COMPILER   HELLO                                                                      04/26/<0 17:26:41  PAGE   2


   50     2               {*/
   51     2                   /* increment the counter but make sure it stays in the range of 0 - 6 */
   52     2       /*          cnt++;
   53     2                   if(cnt >= 0x07)
   54     2                   {
   55     2                       cnt = 1;
   56     2                   }
   57     2                   
   58     2                   key = ReadData();*/                     /* read the key data */
   59     2                   /*for(i = 0; i < 100; i++);*/
   60     2                   /*outword(DISP_CTRL_ADDR, 0x087);*/         /* output WRITE DISPLAY to control word */
   61     2                   /*for(i = 0; i < 100; i++);*/
   62     2                   /*outword(DISP_DATA_ADDR, nums[cnt-1]);*/       /* outputthe new display data */
   63     2       /*          for(i = 0; i < 100; i++);
   64     2       
   65     2               }*/
   66     2               
   67     2               
   68     2           }
   69     1       }
iC-86  COMPILER   HELLO                                                                      04/26/<0 17:26:41  PAGE   3
                  ASSEMBLY LISTING OF OBJECT CODE


                                                   ; STATEMENT # 22
                           main      PROC NEAR
             0000  55              PUSH    BP
             0001  8BEC            MOV     BP,SP
             0003  81EC0600        SUB     SP,6H
                           @1:
                                                   ; STATEMENT # 24
             0007  C646FB20        MOV     [BP].cnt,20H
                                                   ; STATEMENT # 28
             000B  B8D300          MOV     AX,0D3H
             000E  BAEAFF          MOV     DX,0FFEAH
             0011  EF              OUT     DX,AX
                                                   ; STATEMENT # 29
             0012  C746FC0000      MOV     [BP].i,0H
             0017  E90300          JMP     @4
                           @2:
             001A  FF46FC          INC     [BP].i
                           @4:
             001D  817EFC6400      CMP     [BP].i,64H
             0022  7203            JB      $+5H
             0024  E90300          JMP     @3
             0027  E9F0FF          JMP     @2
                           @3:
                                                   ; STATEMENT # 30
             002A  B88000          MOV     AX,80H
             002D  BAEAFF          MOV     DX,0FFEAH
             0030  EF              OUT     DX,AX
                                                   ; STATEMENT # 31
             0031  C746FC0000      MOV     [BP].i,0H
             0036  E90300          JMP     @7
                           @5:
             0039  FF46FC          INC     [BP].i
                           @7:
             003C  817EFC6400      CMP     [BP].i,64H
             0041  7203            JB      $+5H
             0043  E90300          JMP     @6
             0046  E9F0FF          JMP     @5
                           @6:
                                                   ; STATEMENT # 32
             0049  FF76FB          PUSH    [BP].cnt; 1
             004C  E80000          CALL    decode_7seg
             004F  B400            MOV     AH,0H
             0051  BAE8FF          MOV     DX,0FFE8H
             0054  EF              OUT     DX,AX
                                                   ; STATEMENT # 34
                           @9:
                                                   ; STATEMENT # 36
             0055  C746FC0000      MOV     [BP].i,0H
             005A  E90300          JMP     @12
                           @10:
             005D  FF46FC          INC     [BP].i
                           @12:
             0060  817EFC1027      CMP     [BP].i,2710H
             0065  7203            JB      $+5H
             0067  E90300          JMP     @11
             006A  E9F0FF          JMP     @10
iC-86  COMPILER   HELLO                                                                      04/26/<0 17:26:41  PAGE   4
                  ASSEMBLY LISTING OF OBJECT CODE


                           @11:
                                                   ; STATEMENT # 39
             006D  8A46FB          MOV     AL,[BP].cnt
             0070  FEC0            INC     AL
             0072  8846FB          MOV     [BP].cnt,AL
                                                   ; STATEMENT # 40
             0075  80F87A          CMP     AL,7AH
             0078  7703            JA      $+5H
             007A  E90400          JMP     @13
                                                   ; STATEMENT # 42
             007D  C646FB20        MOV     [BP].cnt,20H
                                                   ; STATEMENT # 44
                           @13:
             0081  B88000          MOV     AX,80H
             0084  BAEAFF          MOV     DX,0FFEAH
             0087  EF              OUT     DX,AX
                                                   ; STATEMENT # 45
             0088  C746FC0000      MOV     [BP].i,0H
             008D  E90300          JMP     @16
                           @14:
             0090  FF46FC          INC     [BP].i
                           @16:
             0093  817EFC6400      CMP     [BP].i,64H
             0098  7203            JB      $+5H
             009A  E90300          JMP     @15
             009D  E9F0FF          JMP     @14
                           @15:
                                                   ; STATEMENT # 46
             00A0  FF76FB          PUSH    [BP].cnt; 1
             00A3  E80000          CALL    decode_7seg
             00A6  B400            MOV     AH,0H
             00A8  BAE8FF          MOV     DX,0FFE8H
             00AB  EF              OUT     DX,AX
                                                   ; STATEMENT # 68
             00AC  E9A6FF          JMP     @9
                           @8:
                                                   ; STATEMENT # 69
             00AF  8BE5            MOV     SP,BP
             00B1  5D              POP     BP
             00B2  C3              RET
                           main      ENDP



MODULE INFORMATION:

     CODE AREA SIZE               = 00B3H    179D
     CONSTANT AREA SIZE           = 0000H      0D
     DATA AREA SIZE               = 0000H      0D
     MAXIMUM STACK SIZE           = 000CH     12D

iC-86 COMPILATION COMPLETE.      0 WARNINGS,     0 ERRORS
